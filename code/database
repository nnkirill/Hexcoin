CREATE DATABASE hexcoin;

-- Table: public.main_registry

-- DROP TABLE IF EXISTS public.main_registry;

CREATE TABLE IF NOT EXISTS public.main_registry
(
    transaction_id integer NOT NULL,
    amount numeric(13,2),
    sender_id character(16) COLLATE pg_catalog."default",
    recipient_id character(16) COLLATE pg_catalog."default",
    digital_signature character(128) COLLATE pg_catalog."default",
    transaction_time timestamp with time zone
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.main_registry
    OWNER to postgres;

-- Table: public.public_keys

-- DROP TABLE IF EXISTS public.public_keys;

CREATE TABLE IF NOT EXISTS public.public_keys
(
    id character(16) COLLATE pg_catalog."default" NOT NULL,
    public_key character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT public_keys_pkey PRIMARY KEY (id),
    CONSTRAINT public_keys_id_fkey FOREIGN KEY (id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.public_keys
    OWNER to postgres;

-- Table: public.registry

-- DROP TABLE IF EXISTS public.registry;

CREATE TABLE IF NOT EXISTS public.registry
(
    transaction_id integer NOT NULL,
    amount numeric(13,10),
    sender_id character(16) COLLATE pg_catalog."default",
    recipient_id character(16) COLLATE pg_catalog."default",
    digital_signature character(128) COLLATE pg_catalog."default",
    transaction_time timestamp with time zone
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.registry
    OWNER to postgres;

-- Table: public.temporary_registry

-- DROP TABLE IF EXISTS public.temporary_registry;

CREATE TABLE IF NOT EXISTS public.temporary_registry
(
    transaction_id integer NOT NULL,
    amount numeric(13,2),
    sender_id character(16) COLLATE pg_catalog."default",
    recipient_id character(16) COLLATE pg_catalog."default",
    digital_signature character(128) COLLATE pg_catalog."default",
    transaction_time timestamp with time zone
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.temporary_registry
    OWNER to postgres;

-- Table: public.users

-- DROP TABLE IF EXISTS public.users;

CREATE TABLE IF NOT EXISTS public.users
(
    id character(16) COLLATE pg_catalog."default" NOT NULL,
    password_hash_sha224 character(56) COLLATE pg_catalog."default",
    password_hash_sha256 character(64) COLLATE pg_catalog."default",
    account_balance numeric(13,2),
    CONSTRAINT users_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to postgres;

-- PROCEDURE: public.change_balance(integer, character)

-- DROP PROCEDURE IF EXISTS public.change_balance(integer, character);

CREATE OR REPLACE PROCEDURE public.change_balance(
	IN integer,
	IN character)
LANGUAGE 'plpgsql'
AS $BODY$

BEGIN

update users
set account_balance = account_balance + $1 where id = $2;

END;
$BODY$;
ALTER PROCEDURE public.change_balance(integer, character)
    OWNER TO postgres;

-- PROCEDURE: public.create_user(character, character, character, numeric)

-- DROP PROCEDURE IF EXISTS public.create_user(character, character, character, numeric);

CREATE OR REPLACE PROCEDURE public.create_user(
	IN character,
	IN character,
	IN character,
	IN numeric)
LANGUAGE 'plpgsql'
AS $BODY$

BEGIN

INSERT INTO Users(id, password_hash_sha224, password_hash_sha256, account_balance) VALUES ($1, $2, $3, $4);

END;
$BODY$;
ALTER PROCEDURE public.create_user(character, character, character, numeric)
    OWNER TO postgres;

-- PROCEDURE: public.delete_key(character)

-- DROP PROCEDURE IF EXISTS public.delete_key(character);

CREATE OR REPLACE PROCEDURE public.delete_key(
	IN character)
LANGUAGE 'plpgsql'
AS $BODY$

begin

delete from public_keys where id = $1;

end;
$BODY$;
ALTER PROCEDURE public.delete_key(character)
    OWNER TO postgres;

-- PROCEDURE: public.new_transaction(integer, numeric, character, character, character)

-- DROP PROCEDURE IF EXISTS public.new_transaction(integer, numeric, character, character, character);

CREATE OR REPLACE PROCEDURE public.new_transaction(
	IN integer,
	IN numeric,
	IN character,
	IN character,
	IN character)
LANGUAGE 'plpgsql'
AS $BODY$

BEGIN

INSERT INTO temporary_registry(transaction_id, amount, sender_id, recipient_id, digital_signature, transaction_time) VALUES ($1, $2, $3, $4, $5, now());

END;
$BODY$;
ALTER PROCEDURE public.new_transaction(integer, numeric, character, character, character)
    OWNER TO postgres;

-- PROCEDURE: public.pub_key_value(character, character varying)

-- DROP PROCEDURE IF EXISTS public.pub_key_value(character, character varying);

CREATE OR REPLACE PROCEDURE public.pub_key_value(
	IN character,
	IN character varying)
LANGUAGE 'plpgsql'
AS $BODY$

begin

INSERT INTO public_keys (id, public_key) VALUES ($1, $2);

end;
$BODY$;
ALTER PROCEDURE public.pub_key_value(character, character varying)
    OWNER TO postgres;

-- PROCEDURE: public.sign_in(character)

-- DROP PROCEDURE IF EXISTS public.sign_in(character);

CREATE OR REPLACE PROCEDURE public.sign_in(
	IN character)
LANGUAGE 'plpgsql'
AS $BODY$

BEGIN

SELECT * FROM Users WHERE id = $1;

end;
$BODY$;
ALTER PROCEDURE public.sign_in(character)
    OWNER TO postgres;

-- PROCEDURE: public.update_registry(integer, numeric, character, character, character, timestamp with time zone)

-- DROP PROCEDURE IF EXISTS public.update_registry(integer, numeric, character, character, character, timestamp with time zone);

CREATE OR REPLACE PROCEDURE public.update_registry(
	IN integer,
	IN numeric,
	IN character,
	IN character,
	IN character,
	IN timestamp with time zone)
LANGUAGE 'plpgsql'
AS $BODY$

BEGIN

INSERT INTO main_registry(transaction_id, amount, sender_id, recipient_id, digital_signature, transaction_time) VALUES ($1, $2, $3, $4, $5, $6);

END;
$BODY$;
ALTER PROCEDURE public.update_registry(integer, numeric, character, character, character, timestamp with time zone)
    OWNER TO postgres;
